OBSThemeMeta {
    name: 'Yami';
    id: 'com.obsproject.Yami';
    author: 'Warchamp7';
    dark: 'true';
}

OBSThemeVars {
    /* OBS Color Palette */
    blue1: #718CDC;
    blue2: #476BD7;
    blue3: #284CB8;
    blue4: #213E97;
    blue5: #1A3278;

    red1: #E85E75;
    red2: #E33B57;
    red3: #C01C37;
    red4: #A1172E;
    red5: #7D1224;

    pink1: #E5619A;
    pink2: #E03E84;
    pink3: #C11F65;
    pink4: #9E1A53;
    pink5: #7B1441;

    teal1: #3DBEF5;
    teal2: #16B1F3;
    teal3: #0981B4;
    teal4: #086F9B;
    teal5: #065374;

    purple1: #997FDC;
    purple2: #805FD3;
    purple3: #5B34BF;
    purple4: #4D2CA0;
    purple5: #3D2380;

    green1: #59D966;
    green2: #37D247;
    green3: #25A231;
    green4: #1E8528;
    green5: #17641E;

    yellow1: #EABC48;
    yellow2: #E5AF24;
    yellow3: #B88A16;
    yellow4: #926E11;
    yellow5: #6E520D;

    grey1: #5B6273;
    grey2: #4E5566;
    grey3: #464B59;
    grey4: #3C404D;
    grey5: #323540;
    grey6: #272A33;
    grey7: #1D1F26;
    grey8: #13141A;

    white1: #FFFFFF;
    white2: #EBEBEB;
    white3: #D6D6D6;
    white4: #C2C2C2;
    white5: #ADADAD;

    black1: #0A0A0A;
    black2: #1F1F1F;
    black3: #333333;
    black4: #474747;
    black5: #5C5C5C;

    /* Base Theme Colors */
    bg_window: alias(grey7);
    bg_base: alias(grey6);
    bg_preview: alias(grey8);

    primary: alias(blue3);
    primary_light: alias(blue2);
    primary_lighter: alias(blue1);
    primary_dark: alias(blue4);
    primary_darker: alias(blue5);

    warning: alias(yellow3);
    danger: alias(red3);

    text: rgb(255,254,255);
    text_light: rgb(214,214,214);
    text_muted: rgb(153,153,153);

    text_disabled: alias(text_muted);
    text_inactive: rgb(255,254,255);

    /* Layout */
    font_base_value: 5;

    font_base: calc(2pt * font_base_value);
    font_large: calc(2.2pt * font_base_value);
    font_xlarge: calc(3pt * font_base_value);

    font_heading: calc(5pt * 5);

    spacing_base_value: 3;

    spacing_base: calc(1px * spacing_base_value);
    spacing_large: calc(2px * spacing_base_value);
    spacing_small: calc(0.5px * spacing_base_value);

    padding_base_value: 4;

    padding_base: calc(1px * padding_base_value);
    padding_large: calc(2px * padding_base_value);
    padding_xlarge: calc(3px * padding_base_value);
    padding_small: calc(0.5px * padding_base_value);

    scrollbar_size: calc(4px * padding_base_value);

    /* Inputs / Controls */
    bg_input: alias(grey4);
    bg_input_hover: alias(grey3);
    bg_input_focus: alias(grey7);

    spacing_input: alias(spacing_base);

    bg_button: alias(grey4);
    bg_button_hover: alias(bg_input_hover);
    bg_button_down: alias(grey7);
    bg_button_disabled: alias(grey6);

    border_color: alias(grey4);
    border_radius: 3px;
    border_radius_small: 2px;
    border_radius_large: 6px;

    highlight: rgb(42,130,218);
    highlight_inactive: rgb(25,28,34);
    
    /* Qt Palette variables can be set with the "palette_" prefix */
    palette_window: alias(bg_window);
    palette_windowText: alias(text);
    palette_base: alias(bg_base);

    palette_light: alias(grey2);
    palette_mid: alias(grey7);
    palette_dark: alias(grey6);

    palette_highlight: alias(primary);
    palette_highlightedText: alias(text);

    palette_text: alias(text);
    palette_link: alias(blue2);
    palette_linkVisited: alias(blue2);

    palette_button: alias(bg_button);
    palette_buttonText: alias(text);

    /* They can be selectively set for palette groups by appending those as well */
    palette_text_active: alias(text);
    palette_text_disabled: alias(text_disabled);
    palette_text_inactive: alias(text_inactive);

    /*
    * Variables calculated at runtime (after all themes have been composed).
    *
    * Support standard add, sub, mul, div operations.
    * Also supports nested calls (but keep it reasonable).
    *
    * Note: When using two operands that have a type (e.g. "px") the type must match!
    *       If only one operand has a type it'll be used for the result.
    * Note 2: Cannot be !editable
    * Note 3: Operands and operator MUST be separated by whitespace
    */
}

/* Default widget style, we override only what is needed. */

QWidget {
    alternate-background-color: ${bg_base};
    color: ${text};
    selection-background-color: ${primary};
    selection-color: ${text};
    font-size: ${font_base};
    font-family: 'Open Sans', '.AppleSystemUIFont', Helvetica, Arial, 'MS Shell Dlg', sans-serif;
}

QWidget:disabled {
    color: ${text_disabled};
}

/* Container windows */

QDialog,
QMainWindow,
QStatusBar,
QMenuBar,
QMenu {
    background-color: ${bg_window};
}

/* macOS Separator Fix */

QMainWindow::separator {
    background: transparent;
    width: ${spacing_base};
    height: ${spacing_base};
}

/* General Widgets */

QLabel,
QGroupBox,
QCheckBox {
    background: transparent;
}

QComboBox,
QCheckBox,
QPushButton,
QSpinBox,
QDoubleSpinBox {
    margin-top: ${spacing_input};
    margin-bottom: ${spacing_input};
}

QListWidget QWidget,
SceneTree QWidget,
SourceTree QWidget {
    margin-top: 0;
    margin-bottom: 0;
}

* [frameShape="1"], * [frameShape="2"], * [frameShape="3"], * [frameShape="4"], * [frameShape="5"], * [frameShape="6"] {
    border: 1px solid ${bg_base};
}


/* Misc */

QAbstractItemView,
QStackedWidget#stackedMixerArea QWidget {
    background-color: ${bg_base};
}

QStackedWidget#stackedMixerArea QScrollBar {
    background-color: ${grey6};
}

QToolTip {
    background-color: ${bg_base};
    color: ${text};
    border: none;
}

/* Context Menu */

QMenu::icon {
    left: 4px;
}

QMenu::separator {
    background: ${bg_button};
    height: 1px;
    margin: ${spacing_base} ${spacing_large};
}

QMenu::item:disabled {
    color: ${text_disabled};
    background: transparent;
}

QMenu::right-arrow {
    image: url(theme:Dark/expand.svg);
}

/* Top Menu Bar Items */
QMenuBar::item {
    background-color: transparent;
}

QMenuBar::item:selected {
    background: ${primary};
}

/* Item Lists */
QListWidget {
    border-radius: ${border_radius};
}

QListWidget::item {
    color: ${text};
}

QListWidget,
QMenu,
SceneTree,
SourceTree {
    padding: ${spacing_base};
}

QListWidget::item,
SourceTreeItem,
QMenu::item,
SceneTree::item {
    padding: ${padding_large};
}

QMenu::item {
    padding-right: 20px;
}

QListWidget::item,
SourceTreeItem,
QMenu::item,
SceneTree::item,
SourceTree::item {
    border-radius: ${border_radius};
    color: ${text};
    border: 0px solid transparent;
}

QMenu::item:selected,
QListWidget::item:selected,
SceneTree::item:selected,
SourceTree::item:selected {
    background-color: ${primary};
}

QMenu::item:hover,
QListWidget::item:hover,
SceneTree::item:hover,
SourceTree::item:hover,
QMenu::item:selected:hover,
QListWidget::item:selected:hover,
SceneTree::item:selected:hover,
SourceTree::item:selected:hover {
    background-color: ${primary_light};
    color: ${text};
}

QListWidget::item:disabled,
QListWidget::item:disabled:hover,
SourceTree::item:disabled,
SourceTree::item:disabled:hover,
SceneTree::item:disabled,
SceneTree::item:disabled:hover {
    background: transparent;
    color: ${text_disabled};
}

QListWidget QLineEdit,
SceneTree QLineEdit,
SourceTree QLineEdit {
    padding:  0;
    padding-bottom: 1px;
    margin: 0;
    border: 1px solid ${white1};
    border-radius: ${border_radius};
}

QListWidget QLineEdit:focus,
SceneTree QLineEdit:focus,
SourceTree QLineEdit:focus {
    border: 1px solid ${grey1};
}

/* Settings QList */

OBSBasicSettings QListWidget {
    border-radius: ${border_radius};
    padding: ${spacing_base};
}

OBSBasicSettings QListWidget::item {
    border-radius: ${border_radius};
    padding: ${padding_large};
}

/* Settings properties view */
OBSBasicSettings #PropertiesContainer {
    background-color: ${bg_base};
}

/* Dock Widget */
OBSDock > QWidget {
    background: ${bg_base};
    border-bottom-left-radius: ${border_radius};
    border-bottom-right-radius: ${border_radius};
}

#transitionsContainer QPushButton {
    margin: 0;
    padding: ${padding_base} ${padding_large};
}

OBSDock QLabel {
    background: transparent;
}

OBSDock QComboBox,
OBSDock QPushButton {
    margin: ${spacing_base} ${spacing_small};
}

QDockWidget {
    font-size: ${font_large};
    font-weight: bold;

    titlebar-close-icon: url(theme:Dark/close.svg);
    titlebar-normal-icon: url(theme:Dark/popout.svg);
}

QDockWidget::title {
    text-align: left;
    background-color: ${bg_button};
    padding: ${padding_large};
    border-top-left-radius: ${border_radius};
    border-top-right-radius: ${border_radius};
}

QDockWidget::close-button, QDockWidget::float-button {
    border: none;
    border-radius: ${border_radius};
    background: transparent;
    margin-right: 1px;
}

QDockWidget::close-button:hover, QDockWidget::float-button:hover {
    background: rgb(79,83,94);
}

QDockWidget::close-button:pressed, QDockWidget::float-button:pressed {
    padding: 1px -1px -1px 1px;
}

QScrollArea {
    border-radius: ${border_radius};
}

/* Qt enforces a padding inside its status bar, so we
 * oversize it and use margin to crunch it back down
 */
OBSBasicStatusBar {
    margin-top: ${spacing_base};
    border-top: 1px solid ${border_color};
    background: ${bg_base};
}

StatusBarWidget > QFrame {
    margin-top: 1px;
    border: 0px solid ${border_color};
    border-left-width: 1px;
    padding: 0px ${padding_xlarge} ${padding_small};
}

/* Group Box */

QGroupBox {
    background: ${bg_base};
    border-radius: ${border_radius};
    padding-top: 32px;
    padding-bottom: 8px;
    font-weight: bold;
    margin-bottom: 6px;
}

QGroupBox::title {
    subcontrol-origin: margin;
    left: ${spacing_large};
    top: ${spacing_large};
}


/* ScrollBars */

QScrollBar {
    background-color: ${grey6};
    margin: px;
    border-radius: ${border_radius};
}

::corner {
    background-color: ${bg_window};
    border: none;
}

QScrollBar:vertical {
    width: ${scrollbar_size};
}

QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {
    border: none;
    background: none;
    height: 0px;
}

QScrollBar::up-arrow:vertical, QScrollBar::down-arrow:vertical, QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {
    border: none;
    background: none;
    color: none;
}

QScrollBar:horizontal {
    height: ${scrollbar_size};
}

QScrollBar::add-line:horizontal, QScrollBar::sub-line:horizontal {
    border: none;
    background: none;
    width: 0px;
}

QScrollBar::left-arrow:horizontal, QScrollBar::right-arrow:horizontal, QScrollBar::add-page:horizontal, QScrollBar::sub-page:horizontal {
    border: none;
    background: none;
    color: none;
}

QScrollBar::handle {
    background-color: ${grey4};
    margin: ${spacing_base};
    border-radius: ${border_radius_small};
    border: 1px solid ${grey4};
}

QScrollBar::handle:hover {
    background-color: ${grey3};
    border-color: ${grey2};
}

QScrollBar::handle:pressed {
    background-color: ${grey8};
    border-color: ${grey8};
}

QScrollBar::handle:vertical {
    min-height: 20px;
}

QScrollBar::handle:horizontal {
    min-width: 20px;
}

/* Source Context Bar */

#contextContainer {
  background-color: ${bg_base};
  margin-top: 4px;
  border-radius: ${border_radius};
}

#contextContainer QPushButton {
    padding-left: 12px;
    padding-right: 12px;
}

QPushButton#sourcePropertiesButton {
    qproperty-icon: url(theme:Dark/settings/general.svg);
}

QPushButton#sourceFiltersButton {
    qproperty-icon: url(theme:Dark/filter.svg);
}

/* Scenes and Sources toolbar */

QToolBar {
    background-color: transparent;
    border: none;
    margin: ${spacing_base} 0px;
}

QPushButton[toolButton="true"],
QToolButton {
    background-color: ${bg_button};
    padding: ${padding_base} ${padding_large};
    margin: 0px 2px;
    border-radius: ${border_radius};
}

QPushButton[toolButton="true"]:last-child,
QToolButton:last-child {
    margin-right: 0px;
}

QToolButton:hover {
    background-color: ${bg_button_hover};
}

QToolButton:pressed {
    background-color: ${bg_button_down};
}

* [themeID="addIconSmall"] {
    qproperty-icon: url(theme:Dark/plus.svg);
}

* [themeID="removeIconSmall"] {
    qproperty-icon: url(theme:Dark/trash.svg);
}

* [themeID="clearIconSmall"] {
    qproperty-icon: url(theme:Dark/entry-clear.svg);
}

* [themeID="propertiesIconSmall"] {
    qproperty-icon: url(theme:Dark/settings/general.svg);
}

* [themeID="configIconSmall"] {
    qproperty-icon: url(theme:Dark/settings/general.svg);
}

* [themeID="menuIconSmall"] {
    qproperty-icon: url(theme:Dark/dots-vert.svg);
}

* [themeID="refreshIconSmall"] {
    qproperty-icon: url(theme:Dark/refresh.svg);
}

* [themeID="cogsIcon"] {
    qproperty-icon: url(theme:Dark/cogs.svg);
}

#sourceInteractButton {
    qproperty-icon: url(theme:Dark/interact.svg);
}

* [themeID="upArrowIconSmall"] {
    qproperty-icon: url(theme:Dark/up.svg);
}

* [themeID="downArrowIconSmall"] {
    qproperty-icon: url(theme:Dark/down.svg);
}

* [themeID="pauseIconSmall"] {
    qproperty-icon: url(theme:Dark/media-pause.svg);
}

* [themeID="filtersIcon"] {
    qproperty-icon: url(theme:Dark/filter.svg);
}

QToolBarExtension {
    background: ${bg_button};
    min-width: 12px;
    max-width: 12px;
    padding: 4px 0px;
    margin-left: 0px;

    qproperty-icon: url(theme:Dark/dots-vert.svg);
}


/* Tab Widget */

QTabWidget::pane { /* The tab widget frame */
    border-top: 4px solid ${bg_base};
}

QTabWidget::tab-bar {
    alignment: left;
}

QTabBar QToolButton {
    background: rgb(44,46,53);
    border: none;
}

QTabBar::tab:top {
    border-top-left-radius: 4px;
    border-top-right-radius: 4px;
}

QTabBar::tab:bottom {
    border-bottom-left-radius: 4px;
    border-bottom-right-radius: 4px;
}

QTabBar::tab {
    background: ${bg_base};
    color: ${text};
    border: none;
    padding: 8px 12px;
    min-width: 50px;
    margin: 1px 2px;
}

QTabBar::tab:pressed {
    background: rgb(25,27,38);
}

QTabBar::tab:hover {
    background: rgb(79,83,94);
    color: ${text};
}

QTabBar::tab:selected {
    background: rgb(60,64,75);
    color: ${text};
}

QTabBar::tab:top:selected {
    border-bottom: 2px solid rgb(250,250,250);
}

QTabBar::tab:bottom:selected {
    border-top: 2px solid rgb(250,250,250);
}

QTabBar QToolButton {
    background: ${bg_button};
    min-width: 16px;
    padding: 0px;
}

/* ComboBox */

QComboBox,
QDateTimeEdit {
    background-color: rgb(60,64,75);
    border-style: solid;
    border: 1px;
    border-radius: ${border_radius};
    border-color: rgb(60,64,75);
    padding: 4px;
    padding-left: 10px;
}

QComboBox:hover,
QComboBox:selected,
QDateTimeEdit:hover,
QDateTimeEdit:selected {
    background-color: rgb(79,83,94);
}

QComboBox::drop-down,
QDateTimeEdit::drop-down {
    border:none;
    border-left: 1px solid rgb(25,28,34);
    width: 20px;
}

QComboBox::down-arrow,
QDateTimeEdit::down-arrow {
    qproperty-alignment: AlignTop;
    image: url(theme:Dark/updown.svg);
    width: 100%;
}

QComboBox:on,
QDateTimeEdit:on {
    background-color: rgb(25,27,38);
}

QComboBox:editable:hover {

}

QComboBox::drop-down:editable,
QDateTimeEdit::drop-down:editable {
    border-top-right-radius: 4px;
    border-bottom-right-radius: 4px;
}

QComboBox::down-arrow:editable,
QDateTimeEdit::down-arrow:editable {
    qproperty-alignment: AlignTop;
    image: url(theme:Dark/down.svg);
    width: 8%;
}

/* Textedits etc */

QLineEdit, QTextEdit, QPlainTextEdit {
    background-color: ${bg_input};
    border: none;
    border-radius: ${border_radius};
    padding: 5px 2px 5px 7px;
    border: 2px solid transparent;
}

QLineEdit:hover,
QTextEdit:hover,
QPlainTextEdit:hover {
    border: 2px solid ${grey1};
}

QLineEdit:focus,
QTextEdit:focus,
QPlainTextEdit:focus {
    background-color: ${bg_input_focus};
    border: 2px solid ${primary};
}

/* Spinbox and doubleSpinbox */

QSpinBox,
QDoubleSpinBox {
    background-color: ${bg_button};
    border: 2px solid ${bg_button};
    border-radius: ${border_radius};
    margin-right: ${spacing_base};
    padding: 3px 0px 4px 5px;
}

QSpinBox:hover,
QDoubleSpinBox:hover {
    border: 2px solid ${grey1};
}

QSpinBox:focus,
QDoubleSpinBox:focus {
    background-color: ${bg_input_focus};
    border: 2px solid ${primary};
}

QSpinBox::up-button, QDoubleSpinBox::up-button {
    subcontrol-origin: padding;
    subcontrol-position: top right; /* position at the top right corner */
    right: 2px;
    border-radius: ${border_radius};
    border-width: 0;
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
    border-bottom-width: 0;
}

QSpinBox::down-button, QDoubleSpinBox::down-button {
    subcontrol-origin: padding;
    subcontrol-position: bottom right; /* position at the top right corner */
    right: 2px;
    border-radius: ${border_radius};
    border-width: 0;
    border-top-left-radius: 0;
    border-top-right-radius: 0;
    border-top-width: 0;
}

QSpinBox::up-button:hover, QSpinBox::down-button:hover, QDoubleSpinBox::up-button:hover, QDoubleSpinBox::down-button:hover {
    background-color: rgb(79,83,94);
}

QSpinBox::up-button:pressed, QSpinBox::down-button:pressed, QDoubleSpinBox::up-button:pressed, QDoubleSpinBox::down-button:pressed {
    background-color: rgb(25,27,38);
}

QSpinBox::up-button:disabled, QSpinBox::up-button:off, QSpinBox::down-button:disabled, QSpinBox::down-button:off {
    background-color: rgb(25,27,38);
}

QDoubleSpinBox::up-button:disabled, QDoubleSpinBox::up-button:off, QDoubleSpinBox::down-button:disabled, QDoubleSpinBox::down-button:off {
    background-color: rgb(25,27,38);
}

QSpinBox::up-arrow, QDoubleSpinBox::up-arrow {
    image: url(theme:Dark/up.svg);
    width: 100%;
    margin: 2px;
}

QSpinBox::down-arrow, QDoubleSpinBox::down-arrow {
    image: url(theme:Dark/down.svg);
    width: 100%;
    padding: 2px;
}


/* Controls Dock */
#controlsDock QPushButton {
    margin: 1px;
}

#streamButton,
#recordButton,
QPushButton[themeID="replayBufferButton"],
#broadcastButton {
    padding: 10px;
}

/* Primary Control Button Checked Coloring */
#streamButton:!hover:!pressed:checked,
#recordButton:!hover:!pressed:checked,
QPushButton[themeID="replayBufferButton"]:!hover:!pressed:checked,
QPushButton[themeID="vcamButton"]:!hover:!pressed:checked,
#modeSwitch:!hover:!pressed:checked,
#broadcastButton:!hover:!pressed:checked {
    background: ${primary};
}

/* Primary Control Button Hover Coloring */
#streamButton:hover:!pressed:checked,
#recordButton:hover:!pressed:checked,
QPushButton[themeID="replayBufferButton"]:!pressed:checked,
QPushButton[themeID="vcamButton"]:!pressed:checked,
#modeSwitch:hover:!pressed:checked,
#broadcastButton:hover:!pressed:checked {
    background: ${primary_light};
    color: ${text};
}


/* Buttons */

QPushButton {
    color: ${text};
    background-color: ${bg_button};
    min-height: 18px;
    border: none;
    border-radius: ${border_radius};
    padding: 6px 16px;
}

QPushButton::flat {
    background-color: rgb(60,64,75);
}

QPushButton:checked {
    background-color: ${primary};
}

QPushButton:hover {
    background-color: rgb(79,83,94);
}

QPushButton:pressed {
    background-color: rgb(25,27,38);
}

QPushButton:disabled, QToolButton:disabled {
    background-color: ${bg_button_disabled};
}

QPushButton::menu-indicator {
    image: url(theme:Dark/down.svg);
    subcontrol-position: right;
    subcontrol-origin: padding;
    width: 25px;
}

/* Sliders */

QSlider::groove {
    background-color: ${grey4};
    border: none;
    border-radius: 2px;
}

QSlider::groove:horizontal {
    height: 4px;
}

QSlider::groove:vertical {
    width: 4px;
}

QSlider::sub-page:horizontal {
    background-color: ${blue2};
    border-radius: 2px;
}

QSlider::sub-page:horizontal:disabled {
    background-color: ${grey4};
    border-radius: 2px;
}

QSlider::add-page:horizontal:disabled {
    background-color: ${grey7};
    border-radius: 2px;
}

QSlider::add-page:vertical {
    background-color: ${blue2};
    border-radius: 2px;
}

QSlider::add-page:vertical:disabled {
    background-color: ${grey4};
    border-radius: 2px;
}

QSlider::sub-page:vertical:disabled {
    background-color: ${grey7};
    border-radius: 2px;
}

QSlider::handle {
    background-color: ${white1};
    border-radius: ${border_radius};
}

QSlider::handle:horizontal {
    height: 10px;
    width: 20px;
    margin: -3px 0; /* handle is placed by default on the contents rect of the groove. Expand outside the groove */
}

QSlider::handle:vertical {
    width: 10px;
    height: 20px;
    margin: 0 -3px; /* handle is placed by default on the contents rect of the groove. Expand outside the groove */
}

QSlider::handle:hover {
    background-color: ${white4};
}

QSlider::handle:pressed {
    background-color: ${white5};
}

QSlider::handle:disabled {
    background-color: ${white5};
}

/* Volume Control */

#stackedMixerArea QPushButton {
    background-color: ${bg_button};
    min-width: 16px;
    padding: 4px 8px;
}

/* This is an incredibly cursed but necessary fix */
#stackedMixerArea QPushButton:!hover {
    background-color: ${bg_button};
}

#stackedMixerArea QPushButton:hover {
    background-color: ${bg_button_hover};
}

#stackedMixerArea QPushButton:pressed {
    background-color: ${bg_button_down};
}

VolumeMeter {
    qproperty-backgroundNominalColor: ${green5};
    qproperty-backgroundWarningColor: ${yellow5};
    qproperty-backgroundErrorColor: ${red5};
    qproperty-foregroundNominalColor: ${green2};
    qproperty-foregroundWarningColor: ${yellow2};
    qproperty-foregroundErrorColor: ${red2};
    qproperty-magnitudeColor: rgb(0,0,0);
    qproperty-majorTickColor: ${white1};
    qproperty-minorTickColor: ${grey1};
}

/* Status Bar */

QStatusBar::item {
    border: none;
}

/* Table View */

QTableView {
    background: ${bg_base};
    gridline-color: ${grey1};
}

QTableView::item {
    margin: 0px;
    padding: 0px;
}

QTableView QLineEdit {
    background: ${bg_input_focus};
    padding: 0;
    margin: 0;
}

QTableView QPushButton,
QTableView QToolButton {
    padding: 0px;
    margin: -1px;
    border_radius: 0px;
}

QHeaderView::section {
    background-color: ${bg_button};
    color: ${text};
    border: none;
    border-left: 1px solid ${bg_window};
    border-right: 1px solid ${bg_window};
    padding: 3px 0px;
    margin-bottom: 2px;
}

/* Mute CheckBox */

MuteCheckBox::indicator:checked {
    image: url(theme:Dark/mute.svg);
}

MuteCheckBox::indicator:indeterminate {
    image: url(theme:Dark/unassigned.svg);
}

MuteCheckBox::indicator:unchecked {
    image: url(theme:Dark/settings/audio.svg);
}

OBSHotkeyLabel[hotkeyPairHover=true] {
    color: rgb(53,82,222);
}

/* Label warning/error */

QLabel#warningLabel {
    color: ${warning};
    font-weight: bold;
}

QLabel#errorLabel {
    color: ${danger};
    font-weight: bold;
}

* [themeID="warning"] {
    color: ${danger};
    font-weight: bold;
}

* [themeID="error"] {
    color: ${danger};
    font-weight: bold;
}

* [themeID="good"] {
    color: ${green3};
    font-weight: bold;
}

/* About dialog */

* [themeID="aboutName"] {
    font-size: ${font_heading};
    font-weight: bold;
}

* [themeID="aboutVersion"] {
    font-size: ${font_large};
    margin-bottom: 20px;
}

* [themeID="aboutInfo"] {
    margin-bottom: 20px;
}

* [themeID="aboutHLayout"] {
    background-color: ${bg_base};
}

/* Canvas / Preview background color */

OBSQTDisplay {
    qproperty-displayBackgroundColor: ${bg_preview};
}

/* Filters Window */

OBSBasicFilters QListWidget {
    border-radius: ${border_radius_large};
    padding: ${spacing_base};
}

OBSBasicFilters QListWidget::item {
    border-radius: ${border_radius};
    padding: ${padding_base} ${padding_large};
}

OBSBasicFilters #widget,
OBSBasicFilters #widget_2 {
    margin: 0px;
    padding: 0px;
    padding-bottom: ${padding_base};
}

OBSBasicFilters #widget QPushButton,
OBSBasicFilters #widget_2 QPushButton {
    min-width: 16px;
    padding: ${padding_base} ${padding_large};
    margin-top: 0px;
}

/* Preview/Program labels */

* [themeID="previewProgramLabels"] {
    font-size: ${font_xlarge};
    font-weight: bold;
    color: ${text_light};
    margin-bottom: 4px;
}

/* Settings Icons */

OBSBasicSettings {
    qproperty-generalIcon: url(theme:Dark/settings/general.svg);
    qproperty-appearanceIcon: url(theme:Dark/settings/appearance.svg);
    qproperty-streamIcon: url(theme:Dark/settings/stream.svg);
    qproperty-outputIcon: url(theme:Dark/settings/output.svg);
    qproperty-audioIcon: url(theme:Dark/settings/audio.svg);
    qproperty-videoIcon: url(theme:Dark/settings/video.svg);
    qproperty-hotkeysIcon: url(theme:Dark/settings/hotkeys.svg);
    qproperty-accessibilityIcon: url(theme:Dark/settings/accessibility.svg);
    qproperty-advancedIcon: url(theme:Dark/settings/advanced.svg);
}

/* Checkboxes */
QCheckBox {

}

QCheckBox::indicator,
QGroupBox::indicator {
    width: 18px;
    height: 18px;
}

QGroupBox::indicator {
    margin-left: 2px;
}

QCheckBox::indicator:unchecked,
QGroupBox::indicator:unchecked {
    image: url(theme:Yami/checkbox_unchecked.svg);
}

QCheckBox::indicator:unchecked:hover,
QGroupBox::indicator:unchecked:hover {
    border: none;
    image: url(theme:Yami/checkbox_unchecked_focus.svg);
}

QCheckBox::indicator:checked,
QGroupBox::indicator:checked {
    image: url(theme:Yami/checkbox_checked.svg);
}

QCheckBox::indicator:checked:hover,
QGroupBox::indicator:checked:hover {
    border: none;
    image: url(theme:Yami/checkbox_checked_focus.svg);
}

QCheckBox::indicator:checked:disabled,
QGroupBox::indicator:checked:disabled {
    image: url(theme:Yami/checkbox_checked_disabled.svg);
}

QCheckBox::indicator:unchecked:disabled,
QGroupBox::indicator:unchecked:disabled {
    image: url(theme:Yami/checkbox_unchecked_disabled.svg);
}

/* Locked CheckBox */

QCheckBox[lockCheckBox=true] {
    outline: none;
    background: transparent;
}

QCheckBox[lockCheckBox=true]::indicator {
    width: 16px;
    height: 16px;
}

QCheckBox[lockCheckBox=true]::indicator:checked,
QCheckBox[lockCheckBox=true]::indicator:checked:hover {
    image: url(theme:Dark/locked.svg);
}

QCheckBox[lockCheckBox=true]::indicator:unchecked,
QCheckBox[lockCheckBox=true]::indicator:unchecked:hover {
    image: url(:res/images/unlocked.svg);
}

/* Visibility CheckBox */

QCheckBox[visibilityCheckBox=true] {
    outline: none;
    background: transparent;
}

QCheckBox[visibilityCheckBox=true]::indicator {
    width: 16px;
    height: 16px;
}

QCheckBox[visibilityCheckBox=true]::indicator:checked,
QCheckBox[visibilityCheckBox=true]::indicator:checked:hover {
    image: url(theme:Dark/visible.svg);
}

QCheckBox[visibilityCheckBox=true]::indicator:unchecked,
QCheckBox[visibilityCheckBox=true]::indicator:unchecked:hover {
    image: url(:res/images/invisible.svg);
}

* [themeID="revertIcon"] {
    qproperty-icon: url(theme:Dark/revert.svg);
}

/* Mute CheckBox */

MuteCheckBox {
    outline: none;
}

MuteCheckBox::indicator {
    width: 16px;
    height: 16px;
}

MuteCheckBox::indicator:checked {
    image: url(theme:Dark/mute.svg);
}

MuteCheckBox::indicator:unchecked {
    image: url(theme:Dark/settings/audio.svg);
}

MuteCheckBox::indicator:unchecked:hover {
    image: url(theme:Dark/settings/audio.svg);
}

MuteCheckBox::indicator:unchecked:focus {
    image: url(theme:Dark/settings/audio.svg);
}

MuteCheckBox::indicator:checked:hover {
    image: url(theme:Dark/mute.svg);
}

MuteCheckBox::indicator:checked:focus {
    image: url(theme:Dark/mute.svg);
}

MuteCheckBox::indicator:checked:disabled {
    image: url(theme:Dark/mute.svg);
}

MuteCheckBox::indicator:unchecked:disabled {
    image: url(theme:Dark/settings/audio.svg);
}

#hotkeyFilterReset {
    margin-top: 0px;
}

OBSHotkeyWidget {
    padding: 8px 0px;
    margin: 2px 0px;
}

OBSHotkeyLabel {
    padding: 4px 0px;
}

OBSHotkeyLabel[hotkeyPairHover=true] {
    color: ${blue2};
}

OBSHotkeyWidget QPushButton {
    min-width: 16px;
    padding: ${padding_base};
    margin-top: 0px;
    margin-left: ${spacing_base};
}


/* Sources List Group Collapse Checkbox */

QCheckBox[sourceTreeSubItem=true] {
    background: transparent;
    outline: none;
    padding: 0px;
}

QCheckBox[sourceTreeSubItem=true]::indicator {
    width: 12px;
    height: 12px;
}

QCheckBox[sourceTreeSubItem=true]::indicator:checked,
QCheckBox[sourceTreeSubItem=true]::indicator:checked:hover {
    image: url(theme:Dark/expand.svg);
}

QCheckBox[sourceTreeSubItem=true]::indicator:unchecked,
QCheckBox[sourceTreeSubItem=true]::indicator:unchecked:hover {
    image: url(theme:Dark/collapse.svg);
}

/* Source Icons */

OBSBasic {
    qproperty-imageIcon: url(theme:Dark/sources/image.svg);
    qproperty-colorIcon: url(theme:Dark/sources/brush.svg);
    qproperty-slideshowIcon: url(theme:Dark/sources/slideshow.svg);
    qproperty-audioInputIcon: url(theme:Dark/sources/microphone.svg);
    qproperty-audioOutputIcon: url(theme:Dark/settings/audio.svg);
    qproperty-desktopCapIcon: url(theme:Dark/settings/video.svg);
    qproperty-windowCapIcon: url(theme:Dark/sources/window.svg);
    qproperty-gameCapIcon: url(theme:Dark/sources/gamepad.svg);
    qproperty-cameraIcon: url(theme:Dark/sources/camera.svg);
    qproperty-textIcon: url(theme:Dark/sources/text.svg);
    qproperty-mediaIcon: url(theme:Dark/sources/media.svg);
    qproperty-browserIcon: url(theme:Dark/sources/globe.svg);
    qproperty-groupIcon: url(theme:Dark/sources/group.svg);
    qproperty-sceneIcon: url(theme:Dark/sources/scene.svg);
    qproperty-defaultIcon: url(theme:Dark/sources/default.svg);
    qproperty-audioProcessOutputIcon: url(theme:Dark/sources/windowaudio.svg);
}

/* Scene Tree Grid Mode */

SceneTree {
    qproperty-gridItemWidth: 154;
    qproperty-gridItemHeight: 31;
}

*[gridMode="true"] SceneTree::item {
    color: ${text};
    background-color: ${bg_button};
    border-radius: ${border_radius};
    margin: ${spacing_base};
}

*[gridMode="true"] SceneTree::item:selected {
    background-color: ${primary};
}

*[gridMode="true"] SceneTree::item:checked {
    background-color: ${primary};
}

*[gridMode="true"] SceneTree::item:hover {
    background-color: ${primary_light};
}

*[gridMode="true"] SceneTree::item:selected:hover {
    background-color: ${primary_light};
}

/* Save icon */

* [themeID="replayIconSmall"] {
    qproperty-icon: url(theme:Dark/save.svg);
}

/* Studio Mode T-Bar */

QSlider[themeID="tBarSlider"] {
    height: 24px;
}

QSlider::groove:horizontal[themeID="tBarSlider"] {
    height: 8px;
}

QSlider::sub-page:horizontal[themeID="tBarSlider"] {
    background: ${blue2};
}

QSlider::handle:horizontal[themeID="tBarSlider"] {
    width: 12px;
    height: 24px;
    margin: -24px 0px;
}

/* Media icons */

* [themeID="playIcon"] {
    qproperty-icon: url(theme:Dark/media/media_play.svg);
}

* [themeID="pauseIcon"] {
    qproperty-icon: url(theme:Dark/media/media_pause.svg);
}

* [themeID="restartIcon"] {
    qproperty-icon: url(theme:Dark/media/media_restart.svg);
}

* [themeID="stopIcon"] {
    qproperty-icon: url(theme:Dark/media/media_stop.svg);
}

* [themeID="nextIcon"] {
    qproperty-icon: url(theme:Dark/media/media_next.svg);
}

* [themeID="previousIcon"] {
    qproperty-icon: url(theme:Dark/media/media_previous.svg);
}

/* YouTube Integration */
OBSYoutubeActions {
    qproperty-thumbPlaceholder: url(theme:Dark/sources/image.svg);
}

#ytEventList QLabel {
    color: ${text};
    background-color: ${bg_button};
    border: none;
    border-radius: ${border_radius};
    padding: 4px 20px;
}

#ytEventList QLabel:hover {
    background-color: rgb(79,83,94);
}

#ytEventList QLabel[isSelectedEvent=true] {
    background-color: ${primary};
    border: none;
}

#ytEventList QLabel[isSelectedEvent=true]:hover {
    background-color: ${primary_light};
    color: ${text};
}

/* Calendar Widget */
QDateTimeEdit::down-arrow {
    qproperty-alignment: AlignTop;
    image: url(theme:Dark/down.svg);
    width: 100%;
}

QDateTimeEdit:on {
    background-color: ${grey7};
}

/* Calendar Top Bar */
QCalendarWidget QWidget#qt_calendar_navigationbar {
    background-color: ${bg_base};
    padding: ${padding_base} ${padding_large};
}

/* Calendar Top Bar Buttons */
QCalendarWidget QToolButton {
    background-color: ${bg_button};
    padding: 2px 16px;
    border-radius: ${border_radius};
    margin: ${spacing_base};
}

#qt_calendar_monthbutton::menu-indicator {
    image: url(theme:Dark/down.svg);
    subcontrol-position: right;
    padding-top: ${padding_small};
    padding-right: ${padding_base};
    height: 10px;
    width: 10px;
}

QCalendarWidget #qt_calendar_prevmonth {
    padding: ${padding_small};
    qproperty-icon: url(theme:Dark/left.svg);
    icon-size: 16px, 16px;
}

QCalendarWidget #qt_calendar_nextmonth {
    padding: ${padding_small};
    qproperty-icon: url(theme:Dark/right.svg);
    icon-size: 16px, 16px;
}

QCalendarWidget QToolButton:hover {
    background-color: ${bg_button_hover};
    border-radius: ${border_radius};
}

QCalendarWidget QToolButton:pressed {
    background-color: ${bg_button_down};
}

/* Month Dropdown Menu */
QCalendarWidget QMenu {

}
/* Year spinbox */
QCalendarWidget QSpinBox {
    background-color: ${bg_input};
    border: none;
    border-radius: ${border_radius};
    margin: 0px ${spacing_base} 0px 0px;
    padding: ${padding_base} 16px;
}

QCalendarWidget QSpinBox::up-button { subcontrol-origin: border; subcontrol-position: top right; width: 16px; }
QCalendarWidget QSpinBox::down-button {subcontrol-origin: border; subcontrol-position: bottom right; width: 16px;}
QCalendarWidget QSpinBox::up-arrow { width: 10px; height: 10px; }
QCalendarWidget QSpinBox::down-arrow { width: 10px; height: 10px; }

/* Days of the Week Bar */
QCalendarWidget QWidget { alternate-background-color: ${grey7}; }

QCalendarWidget QAbstractItemView:enabled {
    background-color: ${bg_base};
    color: ${text};
}

QCalendarWidget QAbstractItemView:disabled {
    color: ${text_disabled};
}

/* VirtualCam Plugin Fixes */

#VirtualProperties QWidget {
    margin-top: 0;
    margin-bottom: 0;
}

/* Disable icons on QDialogButtonBox */
QDialogButtonBox {
    dialogbuttonbox-buttons-have-icons: 0;
}

/* Stats dialog */
OBSBasicStats {
    background: ${bg_base};
}

/* Advanced audio dialog */
OBSBasicAdvAudio #scrollAreaWidgetContents {
    background: ${bg_base};
}
